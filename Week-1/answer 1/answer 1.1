Exercise 1.1:


1.When a user enters an URL in the browser, how does the browser fetch the desired result ?
Explain this with the below in mind and Demonstrate this by drawing a diagram for the same.


1. We type maps.google.com into the address bar of your browser.
2. The browser checks the cache for a DNS record to find the corresponding IP address of maps.google.com.
3. If the requested URL is not in the cache, ISP’s DNS server initiates a DNS query to find the IP address of the server that hosts maps.google.com.
4. The browser initiates a TCP connection with the server.
5. The browser sends an HTTP request to the webserver.
6. The server handles the request and sends back a response.
7. The server sends out an HTTP response.
8. The browser displays the HTML content (for HTML responses, which is the most common).


Refer to resolve.png for resolution of URL entered by user in the browser.



============================


What is the main functionality of the browser?

The main function is to retrieve information from the World Wide Web and making it available for users
Visiting any website can be done using a web browser. When a URL is entered in a browser, the web server takes us to that website

The main function of a browser is to present the web resource you choose, by requesting it from the server and displaying it in the browser window. The resource is usually an HTML document, but may also be a PDF, image, or some other type of content. The location of the resource is specified by the user using a URI (Uniform Resource Identifier).

The way the browser interprets and displays HTML files is specified in the HTML and CSS specifications.
These specifications are maintained by the W3C (World Wide Web Consortium) organization, which is the standards organization for 
the web. For years browsers conformed to only a part of the specifications and developed their own extensions. 
That caused serious compatibility issues for web authors. 
Today most of the browsers more or less conform to the specifications.


============================

High Level Components of a browser.

The browser's main components are:

The user interface: this includes the address bar, back/forward button, bookmarking menu, etc. 
Every part of the browser display except the window where you see the requested page.

The browser engine: marshals actions between the UI and the rendering engine.

The rendering engine: responsible for displaying requested content. 
For example if the requested content is HTML, the rendering engine parses HTML and CSS, 
and displays the parsed content on the screen.

Networking: for network calls such as HTTP requests, using different implementations for different 
platform behind a platform-independent interface.

UI backend: used for drawing basic widgets like combo boxes and windows. 
This backend exposes a generic interface that is not platform specific. 
Underneath it uses operating system user interface methods.

JavaScript interpreter. Used to parse and execute JavaScript code.

Data storage. This is a persistence layer. 
The browser may need to save all sorts of data locally, such as cookies. 
Browsers also support storage mechanisms such as localStorage, IndexedDB, WebSQL and FileSystem.

============================


Rendering engine and its use.


The four basic steps include:

The requested HTML page is parsed in chunks, including the external CSS files and in style elements, 
by the rendering engine. The HTML elements are then converted into DOM nodes to form a “content tree” or 
“DOM tree.”

Simultaneously, the browser also creates a render tree. 

This tree includes both the styling information as well as the visual instructions that define the order in
which the elements will be displayed. The render tree ensures that the content is displayed in the desired order.

Further, the render tree goes through the layout process. When a render tree is created, the position or size 
values are not assigned. The entire process of calculating values for evaluating the desired position is 
called a layout process. In this process, every node is assigned the exact coordinates. 

This ensures that every node appears at an accurate position on the screen.

The final step is to paint the screen, wherein the render tree is traversed, and the renderer’s paint() 
method is invoked, which paints each node on the screen using the UI backend layer.

============================
Tree construction

The renderers correspond to DOM elements, but the relation is not one to one. Non-visual DOM elements will not be inserted in the render tree. An example is the "head" element. Also elements whose display value was assigned to "none" will not appear in the tree (whereas elements with "hidden" visibility will appear in the tree). There are DOM elements which correspond to several visual objects. These are usually elements with complex structure that cannot be described by a single rectangle. For example, the "select" element has three renderers: one for the display area, one for the drop down list box and one for the button. Also when text is broken into multiple lines because the width is not sufficient for one line, the new lines will be added as extra renderers. Another example of multiple renderers is broken HTML. According to the CSS spec an inline element must contain either only block elements or only inline elements. In the case of mixed content, anonymous block renderers will be created to wrap the inline elements.

Some render objects correspond to a DOM node but not in the same place in the tree. Floats and absolutely positioned elements are out of flow, placed in a different part of the tree, and mapped to the real frame. A placeholder frame is where they should have been.
============================


Order of script processing

Scripts The model of the web is synchronous. Authors expect scripts to be parsed and executed immediately when the parser reaches a <script/> tag. The parsing of the document halts until the script has been executed. If the script is external then the resource must first be fetched from the network–this is also done synchronously, and parsing halts until the resource is fetched. This was the model for many years and is also specified in HTML4 and 5 specifications. Authors can add the "defer" attribute to a script, in which case it will not halt document parsing and will execute after the document is parsed. HTML5 adds an option to mark the script as asynchronous so it will be parsed and executed by a different thread.

Speculative parsing Both WebKit and Firefox do this optimization. While executing scripts, another thread parses the rest of the document and finds out what other resources need to be loaded from the network and loads them. In this way, resources can be loaded on parallel connections and overall speed is improved. Note: the speculative parser only parses references to external resources like external scripts, style sheets and images: it doesn't modify the DOM tree–that is left to the main parser.

Style sheets Style sheets on the other hand have a different model. Conceptually it seems that since style sheets don't change the DOM tree, there is no reason to wait for them and stop the document parsing. There is an issue, though, of scripts asking for style information during the document parsing stage. If the style is not loaded and parsed yet, the script will get wrong answers and apparently this caused lots of problems. It seems to be an edge case but is quite common. Firefox blocks all scripts when there is a style sheet that is still being loaded and parsed. WebKit blocks scripts only when they try to access certain style properties that may be affected by unloaded style sheets.


====================================================================================

Layout and Painting

Layout
It then proceeds to the next level called layout. The exact size and position of each of the content should be calculated to render on a page (browser viewport). The process is also referred to as reflow. HTML uses a flow-based layout model, meaning geometry is computed in a single pass most of the time. It is a recursive process starting from the root element () of the document.

Painting
Each of the renderers is traversed and the paint method is called to display the content on the screen. The painting process can be global (painting the entire tree) or incremental (the render tree validates its rectangle on-screen) and OS generates the paint event on that specific nodes and the whole tree is not affected. Painting is a gradual process where some parts are parsed and rendered while the process continues with the rest of the item from the network.


============================


Guidelines:


1.Submit this assignment on GIT - Answer should be in readme File (with images) on GIT.
2.Candidates should be able to explain how a browser works.
3.What are the high level components of a browser?
4.How each component works with each other. 
(For example: Networking component isthe one which makes HTTP calls, Data storage component is a browser’s 
persistencelayer which saves data locally such as Cookies and Local Storage.
5.How Parsing works and its importance.
6.The order of execution of scripts.


Outcome:


1.Under the hood understanding of how a browser works.
2.What are the features a browser provides?
3.What a browser is capable of doing.
4.How a web page is translated from a string in a URL to a webpage.



===================================================